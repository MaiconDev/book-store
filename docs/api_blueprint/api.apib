FORMAT: 1A
HOST: http://localhost:3001/api/v1

# Book Store
This document is mapped all the services of the POC - Book Store. In its version 1.0

AlfaeBeto Soluções

```http
Authorization: bearer 5262d64b892e8d4341000001
```

# Group Books
The **Book** feature has the following attributes:

+ id
+ name
+ description
+ price
+ active
+ createdAt
+ updatedAt

The `id`, `createdAt` and `updatedAt` attributes are assigned by the Book Store API at creation time.

## Books [/books]

### List Books [GET]
View all Books.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[BookR,BookR])

+ Response 400 (application/json; charset=utf-8)
    + Attributes (BookError)

### Create Book [POST]
Creates a new Book object.

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

    + Attributes (BookW)


+ Response 201 (application/json; charset=utf-8)
    + Attributes (BookR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (BookError)

## Book [/books/{id}]

+ Parameters
    + id: 1 (number) - The Book `id`.

### Show Book [GET]
Returns a specific Book.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BookR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (BookError)

### Edit Book [PUT]
Edit Book informed on **id**.

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

    + Attributes (BookW)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BookR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (BookError)

### Delete Book [DELETE]
Excludes a Book. The current user must be an administrator, this
returns the deleted object in success.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BookR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (BookError)









# Data Structures

## BookR (object)
+ id: 1 (number) - Unique Identifier
+ name: A volta dos três tigres tristes (required, string) - Book name
+ description: `Vamos brincar de trava-língua? O livro conta a história de três tigres tristes caminham pela trilha de Trieste. Eles estão em busca dos pratos de trigo. No meio do caminho, encontram três patos de Petrópolis e acabam ficando sem trajes. Você pode até achar que conhece esta história, mas aposto que contada desta forma você nunca ouviu – nem leu! Aqui tem também a história do pato que pia… Mas, pato pia? Não sei, mas sei que só paga o pato quem pia.` (required, string) - Book description
+ price: 36.00 (required, number) - Book price
+ active: true (required, boolean)
+ createdAt: `2019-03-21 20:16:43` (string) - Creation date
+ updatedAt: `2019-03-21 20:16:43` (string) - Edition date

## BookW (object)
+ name: A volta dos três tigres tristes (required, string) - Book name
+ description: `Vamos brincar de trava-língua? O livro conta a história de três tigres tristes caminham pela trilha de Trieste. Eles estão em busca dos pratos de trigo. No meio do caminho, encontram três patos de Petrópolis e acabam ficando sem trajes. Você pode até achar que conhece esta história, mas aposto que contada desta forma você nunca ouviu – nem leu! Aqui tem também a história do pato que pia… Mas, pato pia? Não sei, mas sei que só paga o pato quem pia.` (required, string) - Book description
+ price: 36.00 (required, number) - Book price
+ active: true (required, boolean)

## BookError (object)
+ message: `Error message!` (string)
+ description: `Any description of the reason for the error ...` (string)


# Group Orders
The **Order** feature has the following attributes:

+ id
+ userId
+ dateOrder
+ status: **enum(1: pending, 2: payment, 3: canceled)**
+ total
+ createdAt
+ updatedAt

The `id`, `status`, `createdAt` and `updatedAt` attributes are assigned by the Order Store API at creation time.

## Orders [/orders]

### List Orders [GET]
View all Orders.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[OrderR,OrderR])

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)

### Create Order [POST]
Creates a new Order object.

+ Request (application/json; charset=utf-8)
    + Attributes (OrderW)


+ Response 201 (application/json; charset=utf-8)
    + Attributes (OrderR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)

## Order [/orders/{id}]

+ Parameters
    + id: 1 (number) - The Order `id`.

### Show Order [GET]
Returns a specific Order.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (OrderR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)

### Edit Order [PUT]
Edit Order informed on **id**.

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

    + Attributes (OrderW)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (OrderR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)

### Delete Order [DELETE]
Excludes a Order. The current user must be an administrator, this
returns the deleted object in success.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (OrderR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)



## Filters [/orders{?userId,status,dateOrder}]
+ Parameters
    + userId: 1 (number)
    + status: 1 (number)
    + dateOrder: `2019-05-10` (string)

### Orders Filters [GET]
+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[OrderR])

+ Response 400 (application/json; charset=utf-8)
    + Attributes (OrderError)





# Data Structures

## OrderItensR (object)
+ quantity: 5 (required, number)
+ book: BookR (array[BookR])

## OrderItensW (object)
+ quantity: 5 (required, number)
+ bookId: 1 (required, number)

## OrderR (object)
+ id: 1 (number) - Identificador Unico
+ userId: 1 (required, number)
+ dateOrder: `2019-03-21` (required, string)
+ status: 1 (required, number)
+ total: 530 (required, number)
+ itens: OrderItensR,OrderItensR (array[OrderItensR])
+ createdAt: `2019-03-21 20:16:43` (string) - Creation date
+ updatedAt: `2019-03-21 20:16:43` (string) - Edition date

## OrderW (object)
+ userId: 1 (required, number)
+ dateOrder: `2019-03-21` (required, string)
+ total: 530 (number)
+ itens: OrderItensW,OrderItensW (array[OrderItensW])



## OrderError (object)
+ message: `Error message!` (string)
+ description: `Any description of the reason for the error ...` (string)


# Group Users
The **User** feature has the following attributes:

+ id
+ name
+ email
+ password
+ userType: **enum(1: admin, 2: client)**
+ active
+ createdAt
+ updatedAt

The `id`, `createdAt` and `updatedAt` attributes are assigned by the User Store API at creation time.

## Users [/users]

### List Users [GET]
View all Users.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[UserR,UserR])

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)

### Create User [POST]
Creates a new User object.

+ Request (application/json; charset=utf-8)
    + Attributes (UserW)


+ Response 201 (application/json; charset=utf-8)
    + Attributes (UserR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)

## User [/users/{id}]

+ Parameters
    + id: 1 (number) - The User `id`.

### Show User [GET]
Returns a specific User.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (UserR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)

### Edit User [PUT]
Edit User informed on **id**.

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

    + Attributes (UserW)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (UserR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)

### Delete User [DELETE]
Excludes a User. The current user must be an administrator, this
returns the deleted object in success.

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (UserR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)

## Authentication [/login]

### Login [POST]

+ Request (application/json; charset=utf-8)
    + Attributes (LoginW)


+ Response 201 (application/json; charset=utf-8)
    + Attributes (LoginR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)


### Logout [GET]

+ Request
    + Headers

            Authorization: bearer 5262d64b892e8d4341000001

+ Response 200 (application/json; charset=utf-8)
    + Attributes (LogoutR)

+ Response 400 (application/json; charset=utf-8)
    + Attributes (UserError)








# Data Structures

## UserR (object)
+ id: 1 (number) - Unique Identifier
+ name: Admin (required, string)
+ email: admin@gmail.com (required, string)
+ password: iab123 (required, string)
+ userType: 1 (required, number)
+ active: true (required, boolean)
+ createdAt: `2019-03-21 20:16:43` (string) - Creation date
+ updatedAt: `2019-03-21 20:16:43` (string) - Edition date

## UserW (object)
+ name: Admin (required, string)
+ email: admin@gmail.com (required, string)
+ password: iab123 (required, string)
+ userType: 1 (required, number)
+ active: true (required, boolean)

## LoginR (object)
+ token: bearer 5262d64b892e8d4341000001 (required, string)

## LogoutR (object)
+ message: Logout realizado com exito! (required, string)

## LoginW (object)
+ email: admin@gmail.com (required, string)
+ password: iab123 (required, string)

## UserError (object)
+ message: `Error message!` (string)
+ description: `Any description of the reason for the error ...` (string)


